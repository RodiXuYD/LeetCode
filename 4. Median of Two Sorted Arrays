/**
 *There are two sorted arrays nums1 and nums2 of size m and n respectively.
 *Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
 */
 
 /** Example
  *input:nums1 = [1, 3]
  *      nums2 = [2]
  *output:The median is 2.0
  */


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();//n1是第一个数列的长度，n2是第二个数列的长度
        if((n1+n2)%2)
            return findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2+1)*1.0;//如果两个数列的长度和是奇数，则求中位数的话就是寻找第(n1+n2)/2+1位的值
        else
            return (findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2) + findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2 + 1))/2.0;
            //如果两个数列的长度和是偶数，则求中位数的话就是寻找第(n1+n2)/2和(n1+n2)/2+1位的平均值
    }
    //s1和s2分别是两个数列搜寻的起始位置，l1和l2分别是两个数列当前搜寻的长度，k是当前搜寻的位置
    int findPos(vector<int>& nums1, int s1, int l1, vector<int>& nums2, int s2, int l2, int k)
    {
        int pos1, pos2;
        if(l2 < l1)//使得较短的那个数列始终保持在前
            return findPos(nums2, s2, l2, nums1, s1, l1, k);
        
        if(l1 == 0)return nums2[k-1];//如果第一个数列的长度为0，那么直接返回较长数列的第k个值，因为下标是从0开始，所以返回nums2[k-1]
        if(k == 1) return nums1[s1] < nums2[s2] ? nums1[s1] : nums2[s2];//如果k==1，那么只要比较两个数组起始位置的值的大小，返回较小的那个。
        
        pos1 = k/2 < l1 ? k/2 : l1;//如果数列1的长度小于k/2，那么直接用数列1的最后一个数来跟数列2比较
        pos2 = k - pos1;//保证数列1在pos1这个位置之前的数字个数加上数列2在pos2这个位置之前的数字个数等于k（包括pos1和pos2这两个位置）

        if(nums1[s1 + pos1 - 1] == nums2[s2 + pos2 - 1])//如果这两个位置相同，就代表我们已经找到了第k小的数
            return nums1[pos1-1];
        else if(nums1[s1 + pos1 - 1] < nums2[s2 + pos2 - 1])
             //如果pos1位置的数比pos2位置的数小，那么表明第k小的数在pos1位置后面，下一次就放弃考虑pos1之前的数
            return findPos(nums1, s1 + pos1, l1 - pos1, nums2, s2, l2, k - pos1);
        else 
            return findPos(nums1, s1, l1, nums2, s2+pos2, l2 - pos2, k - pos2);   
    }
};
