class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        if((n1+n2)%2)
            return findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2+1)*1.0;
        else
            return (findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2) + findPos(nums1, 0, n1, nums2, 0, n2, (n1+n2)/2 + 1))/2.0;
    }
    int findPos(vector<int>& nums1, int s1, int l1, vector<int>& nums2, int s2, int l2, int k)
    {
        int pos1, pos2;
        if(l2 < l1)
            return findPos(nums2, s2, l2, nums1, s1, l1, k);
        
        if(l1 == 0)return nums2[k-1];
        if(k == 1) return nums1[s1] < nums2[s2] ? nums1[s1] : nums2[s2];
        
        pos1 = k/2 < l1 ? k/2 : l1;
        pos2 = k - pos1;

        if(nums1[s1 + pos1 - 1] == nums2[s2 + pos2 - 1])
            return nums1[pos1-1];
        else if(nums1[s1 + pos1 - 1] < nums2[s2 + pos2 - 1])
            return findPos(nums1, s1 + pos1, l1 - pos1, nums2, s2, l2, k - pos1);
        else 
            return findPos(nums1, s1, l1, nums2, s2+pos2, l2 - pos2, k - pos2);   
    }
};
